#
# Makefile for Proxy Lab
#
# The Makefile will build the proxy using all .c and .h files found in the
# current directory. It will not be submitted with your code.
#
# If you have additional .c or .h files (e.g. for building a separate test
# program), you can add those files to .tarignore.
#
# Autolab will execute the command "make proxy" on your specific
# Makefile to build your proxy from sources.

SHELL = /bin/bash
CC = gcc
CLANG_FORMAT = clang-format

PARSER_LIB_PATH = /afs/cs.cmu.edu/academic/class/15213-m21/www/labs/proxylab
CFLAGS = -g -Og -Wall -std=c99 -MMD
CPPFLAGS = -D_FORTIFY_SOURCE=2 -D_XOPEN_SOURCE=700 -I.
LDLIBS = -lpthread -lm
LDLIBS += -Wl,-rpath,$(PARSER_LIB_PATH)
LDLIBS += -L$(PARSER_LIB_PATH) -lhttp_parser

# Uncomment this to enable debug macros
# CPPFLAGS += -DDEBUG

# Targets to compile
HANDIN_TAR = proxylab-handin.tar
FILES = proxy

# Find files to be used for handin
HANDIN_FILES := $(shell \
  tar cvf /dev/null \
    --exclude-from=.gitignore \
    --exclude-from=.tarignore \
    $$(find . -type f)) \
  .clang-format \
  .format-checked

# Filter .c and .h files
SOURCES = $(filter %.c,$(HANDIN_FILES))
DEPS = $(filter %.h,$(HANDIN_FILES))
ifeq ($(SOURCES),)
  $(error No .c files in current directory to make.)
endif

# Default build rule
.PHONY: all
all: $(FILES) tiny-code

.PHONY: tiny-code
tiny-code:
	$(MAKE) -C tiny

# Autogenerated rules to build object files
OBJECTS = $(SOURCES:%.c=%.o)
-include $(SOURCES:%.c=%.d)

# Link proxy executable
proxy: $(OBJECTS)

.PHONY: clean
clean:
	rm -f *.o *.d core $(FILES)
	rm -rf logs source_files response_files results.log get_files
	$(MAKE) -C tiny clean

# Include rules for submit, format, etc
FORMAT_FILES = $(SOURCES) $(DEPS)
HANDOUT_SCRIPTS = driver.sh port-for-user.pl proxy-ref
include helper.mk
